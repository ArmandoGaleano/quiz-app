name: quiz-app

services:
  # Serviço do MySQL
  mysql_db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD} # Senha do root do MySQL definida no .env
      MYSQL_DATABASE: ${DB_NAME} # Nome do banco de dados inicial
      MYSQL_USER: ${DB_USER} # Usuário que será criado no banco
      MYSQL_PASSWORD: ${DB_PASSWORD} # Senha para o usuário acima
    volumes:
      - mysql_data:/var/lib/mysql # Volume persistente para os dados do MySQL
    expose:
      - '3306' # Porta padrão do MySQL exposta para a rede interna
    networks:
      - backend_network # Rede interna compartilhada com outros serviços
    logging:
      driver: 'json-file' # Configuração de logs para limitar o uso de espaço
      options:
        max-size: '10m' # Limite de tamanho para cada arquivo de log
        max-file: '3' # Máximo de 3 arquivos de log
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck: # Verifica se o banco está disponível
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 30s
      timeout: 10s
      retries: 3

  # Serviço do Aplicativo Node.js
  node_app:
    container_name: node_app
    restart: always
    build:
      context: . # Usa o Dockerfile no diretório atual
      dockerfile: Dockerfile
    env_file:
      - .env # Carrega variáveis de ambiente do arquivo .env
    expose:
      - '3000' # Porta do aplicativo exposta para a rede interna
    networks:
      - backend_network # Rede compartilhada com o banco
    depends_on:
      - mysql_db # Garante que o banco estará disponível antes de iniciar
    logging:
      driver: 'json-file' # Configuração de logs
      options:
        max-size: '10m'
        max-file: '3'
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Serviço do NGINX
  nginx:
    image: nginx:1.27.3
    container_name: nginx
    restart: always
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf # Arquivo de configuração do NGINX
      - ./docker/certs:/etc/nginx/certs/cert.pem:ro # Certificados SSL
      - ./docker/certs:/etc/nginx/certs/key.pem:ro # Certificados SSL
      - ./docker/certs/dhparam.pem:/etc/nginx/certs/dhparam.pem:ro # Parâmetros Diffie-Hellman para segurança extra
    ports:
      - '443:443' # Porta HTTPS
      - '80:80' # Porta HTTP necessária para validação do Let's Encrypt
    depends_on:
      - node_app # Garante que o Node.js estará disponível antes do NGINX iniciar
    networks:
      - frontend_network # Rede compartilhada com o Certbot
      - backend_network # Rede compartilhada com o Node.js
    logging:
      driver: 'json-file' # Configuração de logs
      options:
        max-size: '10m'
        max-file: '3'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# Configuração das Redes
networks:
  frontend_network:
    driver: bridge # Rede para comunicação entre o NGINX e o Certbot
  backend_network:
    driver: bridge # Rede para comunicação entre o Node.js e o MySQL

# Configuração dos Volumes
volumes:
  mysql_data:
    driver: local # Volume persistente para os dados do MySQL
